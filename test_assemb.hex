    .data
test_data:
    .word 0

    .text
    .globl _start
_start:
    # 初始化结果寄存器
    li a0, 0          # a0 用于记录通过的测试数量

    # 调用测试函数
    jal test_add
    jal test_sub
    jal test_xor
    jal test_or
    jal test_and
    jal test_sll
    jal test_srl
    jal test_sra
    jal test_slt
    jal test_sltu
    jal test_addi
    jal test_xori
    jal test_ori
    jal test_andi
    jal test_slli
    jal test_srli
    jal test_srai
    jal test_slti
    jal test_sltiu
    jal test_lb_lw
    jal test_lbu_lhu
    jal test_sb_sw
    jal test_beq_bne
    jal test_blt_bge
    jal test_bltu_bgeu
    jal test_jal_jalr
    jal test_lui
    jal test_auipc

    # 所有测试通过
    j end

# 测试 add 指令
test_add:
    li t0, 1
    li t1, 2
    add t2, t0, t1        # t2 = 1 + 2 = 3
    li t3, 3
    bne t2, t3, fail
    addi a0, a0, 1        # 测试通过，a0 加一
    ret

# 测试 sub 指令
test_sub:
    li t0, 5
    li t1, 3
    sub t2, t0, t1        # t2 = 5 - 3 = 2
    li t3, 2
    bne t2, t3, fail
    addi a0, a0, 1
    ret

# 测试 xor 指令
test_xor:
    li t0, 0b1010
    li t1, 0b1100
    xor t2, t0, t1        # t2 = 0b0110
    li t3, 0b0110
    bne t2, t3, fail
    addi a0, a0, 1
    ret

# 测试 or 指令
test_or:
    li t0, 0b1010
    li t1, 0b1100
    or t2, t0, t1         # t2 = 0b1110
    li t3, 0b1110
    bne t2, t3, fail
    addi a0, a0, 1
    ret

# 测试 and 指令
test_and:
    li t0, 0b1010
    li t1, 0b1100
    and t2, t0, t1        # t2 = 0b1000
    li t3, 0b1000
    bne t2, t3, fail
    addi a0, a0, 1
    ret

# 测试 sll 指令
test_sll:
    li t0, 1
    li t1, 3
    sll t2, t0, t1        # t2 = 1 << 3 = 8
    li t3, 8
    bne t2, t3, fail
    addi a0, a0, 1
    ret

# 测试 srl 指令
test_srl:
    li t0, 8
    li t1, 3
    srl t2, t0, t1        # t2 = 8 >> 3 = 1
    li t3, 1
    bne t2, t3, fail
    addi a0, a0, 1
    ret

# 测试 sra 指令
test_sra:
    li t0, -8
    li t1, 2
    sra t2, t0, t1        # t2 = -8 >> 2 = -2
    li t3, -2
    bne t2, t3, fail
    addi a0, a0, 1
    ret

# 测试 slt 指令
test_slt:
    li t0, 1
    li t1, 2
    slt t2, t0, t1        # t2 = (1 < 2) ? 1 : 0 => 1
    li t3, 1
    bne t2, t3, fail
    li t0, 3
    li t1, 2
    slt t2, t0, t1        # t2 = (3 < 2) ? 1 : 0 => 0
    li t3, 0
    bne t2, t3, fail
    addi a0, a0, 1
    ret

# 测试 sltu 指令
test_sltu:
    li t0, -1             # 0xFFFFFFFF
    li t1, 1
    sltu t2, t0, t1       # t2 = (0xFFFFFFFF < 1) ? 1 : 0 => 0
    li t3, 0
    bne t2, t3, fail
    li t0, 1
    li t1, -1             # 0xFFFFFFFF
    sltu t2, t0, t1       # t2 = (1 < 0xFFFFFFFF) ? 1 : 0 => 1
    li t3, 1
    bne t2, t3, fail
    addi a0, a0, 1
    ret

# 测试 addi 指令
test_addi:
    li t0, 5
    addi t1, t0, 3        # t1 = 5 + 3 = 8
    li t2, 8
    bne t1, t2, fail
    addi a0, a0, 1
    ret

# 测试 xori 指令
test_xori:
    li t0, 0b1010
    xori t1, t0, 0b1100   # t1 = 0b0110
    li t2, 0b0110
    bne t1, t2, fail
    addi a0, a0, 1
    ret

# 测试 ori 指令
test_ori:
    li t0, 0b1010
    ori t1, t0, 0b1100    # t1 = 0b1110
    li t2, 0b1110
    bne t1, t2, fail
    addi a0, a0, 1
    ret

# 测试 andi 指令
test_andi:
    li t0, 0b1010
    andi t1, t0, 0b1100   # t1 = 0b1000
    li t2, 0b1000
    bne t1, t2, fail
    addi a0, a0, 1
    ret

# 测试 slli 指令
test_slli:
    li t0, 1
    slli t1, t0, 3        # t1 = 1 << 3 = 8
    li t2, 8
    bne t1, t2, fail
    addi a0, a0, 1
    ret

# 测试 srli 指令
test_srli:
    li t0, 8
    srli t1, t0, 3        # t1 = 8 >> 3 = 1
    li t2, 1
    bne t1, t2, fail
    addi a0, a0, 1
    ret

# 测试 srai 指令
test_srai:
    li t0, -8
    srai t1, t0, 2        # t1 = -8 >> 2 = -2
    li t2, -2
    bne t1, t2, fail
    addi a0, a0, 1
    ret

# 测试 slti 指令
test_slti:
    li t0, 1
    slti t1, t0, 2        # t1 = (1 < 2) ? 1 : 0 => 1
    li t2, 1
    bne t1, t2, fail
    addi a0, a0, 1
    ret

# 测试 sltiu 指令
test_sltiu:
    li t0, -1             # 0xFFFFFFFF
    sltiu t1, t0, 1       # t1 = (0xFFFFFFFF < 1) ? 1 : 0 => 0
    li t2, 0
    bne t1, t2, fail
    addi a0, a0, 1
    ret

# 测试 lb 和 lw 指令
test_lb_lw:
    la t0, test_data
    li t1, 0x12345678
    sw t1, 0(t0)
    lw t2, 0(t0)
    bne t1, t2, fail
    lb t3, 0(t0)          # 低字节，0x78
    li t4, 0x78
    bne t3, t4, fail
    lh t5, 0(t0)          # 低半字，0x5678
    li t6, 0x5678
    bne t5, t6, fail
    addi a0, a0, 1
    ret

# 测试 lbu 和 lhu 指令
test_lbu_lhu:
    la t0, test_data
    li t1, 0xFF123456
    sw t1, 0(t0)
    lbu t2, 0(t0)         # 0x56
    li t3, 0x56
    bne t2, t3, fail
    lhu t4, 0(t0)         # 0x3456
    li t5, 0x3456
    bne t4, t5, fail
    addi a0, a0, 1
    ret

# 测试 sb 和 sw 指令
test_sb_sw:
    la t0, test_data
    li t1, 0x0
    sw t1, 0(t0)          # 清零
    li t2, 0x78
    sb t2, 0(t0)          # 存储字节
    lb t3, 0(t0)
    bne t2, t3, fail
    addi a0, a0, 1
    ret

# 测试 beq 和 bne 指令
test_beq_bne:
    li t0, 1
    li t1, 1
    beq t0, t1, beq_pass
    j fail
beq_pass:
    li t1, 2
    bne t0, t1, bne_pass
    j fail
bne_pass:
    addi a0, a0, 1
    ret

# 测试 blt 和 bge 指令
test_blt_bge:
    li t0, -1
    li t1, 1
    blt t0, t1, blt_pass
    j fail
blt_pass:
    bge t1, t0, bge_pass
    j fail
bge_pass:
    addi a0, a0, 1
    ret

# 测试 bltu 和 bgeu 指令
test_bltu_bgeu:
    li t0, -1
    li t1, 1
    bltu t1, t0, bltu_pass
    j fail
bltu_pass:
    bgeu t0, t1, bgeu_pass
    j fail
bgeu_pass:
    addi a0, a0, 1
    ret

# 测试 jal 和 jalr 指令
test_jal_jalr:
    jal jal_target
    # After returning from jal_target, increment test counter and return
    addi a0, a0, 1
    ret

jal_target:
    # Save 'ra' onto the stack before jalr overwrites it
    addi sp, sp, -4
    sw ra, 0(sp)
    # Test jalr
    la t0, jalr_target
    jalr ra, 0(t0)  # 'ra' is overwritten here
    # Restore 'ra' from the stack
    lw ra, 0(sp)
    addi sp, sp, 4
    # Return to test_jal_jalr
    ret

jalr_target:
    # Perform the test operation
    addi a0, a0, 0  # Or any operation you need
    # Return to jal_target
    ret

# 测试 lui 指令
test_lui:
    lui t0, 0x12345        # t0 = 0x12345000
    li t1, 0x12345000
    bne t0, t1, fail
    addi a0, a0, 1
    ret

# 测试 auipc 指令
test_auipc:
    auipc t0, 0            # t0 = 当前 PC
    # 测试 auipc + 指令的组合
    addi t0, t0, 8         # t0 = PC + 8
    la t1, after_auipc
    bne t0, t1, fail
    addi a0, a0, 1
    ret
after_auipc:

fail:
    # 测试失败，跳转到结束
    j end

end:
    # 程序结束，a0 中的值为通过的测试数量
                    